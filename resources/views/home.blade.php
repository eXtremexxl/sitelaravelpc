@extends('layout')

@section('title', '–ì–ª–∞–≤–Ω–∞—è')

@section('content')
<script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js"></script>
<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.3.5/css/swiper.min.css'>

    <!-- –ì–ª–∞–≤–Ω—ã -->
    <section class="hero">
        <div class="hero-content">
            <div class="hero-text">
                <div class="badges">
                    <span>üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ –æ—Ç 2-—Ö –¥–Ω–µ–π</span>
                    <span>‚≠ê –ë–æ–ª–µ–µ 1000 –∫–ª–∏–µ–Ω—Ç–æ–≤</span>
                </div>
                <h1>–°–±–æ—Ä–∫–∞ –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤</h1>
                <p>–ó–∞–∫–ª—é—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä, —Å–æ–±–∏—Ä–∞–µ–º –ü–ö –ø–æ–¥ –ª—é–±–æ–π –±—é–¥–∂–µ—Ç –∏ –∑–∞–¥–∞—á–∏</p>
                <div class="features">
                    <div class="feature">
                        <img src="{{ asset('imagess/delivery.svg') }}" alt="–î–æ—Å—Ç–∞–≤–∫–∞">
                        <p><strong>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è</strong> –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–§</p>
                    </div>
                    <div class="feature">
                        <img src="{{ asset('imagess/pc.svg') }}" alt="–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è">
                        <p><strong>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è</strong> —Å–±–æ—Ä–∫–∞ –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è</p>
                    </div>
                    <div class="feature">
                        <img src="{{ asset('imagess/document_3.svg') }}" alt="–ì–∞—Ä–∞–Ω—Ç–∏—è">
                        <p><strong>–ì–∞—Ä–∞–Ω—Ç–∏—è</strong> –¥–æ 3-—Ö –ª–µ—Ç</p>
                    </div>
                </div>
                <a href="{{ url('/catalog') }}" class="hero-btn">–ü–û–î–û–ë–†–ê–¢–¨ –ö–û–ú–ü–¨–Æ–¢–ï–†</a>
            </div>
            <div class="hero-image">
                <img src="{{ asset('imagess/Untitleddesign_27_720x.png') }}" alt="–ò–≥—Ä–æ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä">
            </div>
        </div>
    </section>

    <!-- üî• –ë–ª–æ–∫ "–ü–æ—á–µ–º—É –º—ã?" -->
    <section class="advantages">
        <div class="advantage-card">
            <img src="{{ asset('imagess/time.svg') }}" alt="–ë—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞">
            <h3><strong>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è —Å–±–æ—Ä–∫–∞</strong></h3>
            <p>–ü–æ–¥–±–µ—Ä–µ–º –ü–ö –ø–æ–¥ –í–∞—à–∏ –∑–∞–¥–∞—á–∏ –∏ —Å–¥–µ–ª–∞–µ–º –ª—é–±—É—é –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é</p>
        </div>
        <div class="advantage-card">
            <img src="{{ asset('imagess/delivery.svg') }}" alt="–î–æ—Å—Ç–∞–≤–∫–∞">
            <h3><strong>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–§</strong></h3>
            <p>–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ 3-4 –¥–Ω—è. –†–∞–±–æ—Ç–∞ –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É, –¥–∞–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—é</p>
        </div>
        <div class="advantage-card">
            <img src="{{ asset('imagess/like.svg') }}" alt="–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å">
            <h3><strong>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö</strong></h3>
            <p>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º, –≤–∫–ª—é—á–µ–Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</p>
        </div>
    </section>




    <!-- —Å–ª–∞–π–¥–µ—Ä -->
    <div class="wrapper">
    <div class="content1">
        <div class="product-img">
            @foreach($products as $product)
                <div class="product-img__item" id="img{{ $loop->index }}">
                    <img src="{{ asset('storage/' . $product->image) }}" alt="{{ $product->name }}" class="product-img__img">
                </div>
            @endforeach
        </div>

        <div class="product-slider">
            <button class="prev disabled">
                <span class="icon">
                    <svg class="icon icon-arrow-right"><use xlink:href="#icon-arrow-left"></use></svg>
                </span>
            </button>
            <button class="next">
                <span class="icon">
                    <svg class="icon icon-arrow-right"><use xlink:href="#icon-arrow-right"></use></svg>
                </span>
            </button>

            <div class="product-slider__wrp swiper-wrapper">
                @foreach($products as $product)
                    <div class="product-slider__item swiper-slide" data-target="img{{ $loop->index }}">
                        <div class="product-slider__card">
                            <div class="product-slider__content">
                                <h1 class="product-slider__title">
                                    {{ $product->name }}
                                </h1>
                                <span class="product-slider__price">‚ÇΩ{{ number_format($product->price, 0, ',', '.') }}</span>

                                <div class="product-ctr">
                                    <!-- –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ -->
                                    @php
                                        $components = [
                                            'cpu' => ['–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä', ['Intel Core i9', 'AMD Ryzen 9']],
                                            'gpu' => ['–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', ['NVIDIA RTX 5090', 'NVIDIA RTX 5080']],
                                            'ram' => ['–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å', ['16 GB DDR4', '32 GB DDR4']],
                                            'storage' => ['–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å', ['1 TB SSD', '2 TB SSD']]
                                        ];
                                        $randomComponentKey = array_rand($components);
                                        $randomComponent = $components[$randomComponentKey];
                                        $randomPerformance = rand(80, 100);
                                        $dashArray = $randomPerformance * 3;
                                    @endphp

                                    <div class="product-labels">
                                        <div class="product-labels__title">{{ $randomComponent[0] }}</div>
                                        <div class="product-labels__group">
                                            <label class="product-labels__item">
                                                <input type="radio" class="product-labels__checkbox" name="{{ $randomComponentKey }}_{{ $product->id }}" checked>
                                                <span class="product-labels__txt">{{ $randomComponent[1][0] }}</span>
                                            </label>
                                            <label class="product-labels__item">
                                                <input type="radio" class="product-labels__checkbox" name="{{ $randomComponentKey }}_{{ $product->id }}">
                                                <span class="product-labels__txt">{{ $randomComponent[1][1] }}</span>
                                            </label>
                                        </div>
                                    </div>
                                    <span class="hr-vertical"></span>

                                    <!-- –†–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ -->
                                    <div class="product-inf">
                                        <div class="product-inf__percent">
                                            <div class="product-inf__percent-circle">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100">
                                                    <defs>
                                                        <linearGradient id="gradient{{ $loop->index }}" x1="0%" y1="0%" x2="0%" y2="100%">
                                                            <stop offset="0%" stop-color="#0c1e2c" stop-opacity="0" />
                                                            <stop offset="100%" stop-color="#cb2240" stop-opacity="1" />
                                                        </linearGradient>
                                                    </defs>
                                                    <circle cx="50" cy="50" r="47" 
                                                            stroke-dasharray="{{ $dashArray }}, 300" 
                                                            stroke="#cb2240" 
                                                            stroke-width="4" 
                                                            fill="none"/>
                                                </svg>
                                            </div>
                                            <div class="product-inf__percent-txt">
                                                {{ $randomPerformance }}%
                                            </div>
                                        </div>
                                        <span class="product-inf__title">–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨</span>
                                    </div>
                                </div>

                                <div class="product-slider__bottom">
                                    <form action="{{ route('cart.add', $product->id) }}" method="POST">
                                        @csrf
                                        <button type="submit" class="product-slider__cart">
                                            –î–û–ë–ê–í–ò–¢–¨ –í –ö–û–†–ó–ò–ù–£
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                @endforeach
            </div>
        </div>
    </div>
</div>

<svg class="hidden" hidden>
    <symbol id="icon-arrow-left" viewBox="0 0 32 32">
        <path d="M0.704 17.696l9.856 9.856c0.896 0.896 2.432 0.896 3.328 0s0.896-2.432 0-3.328l-5.792-5.856h21.568c1.312 0 2.368-1.056 2.368-2.368s-1.056-2.368-2.368-2.368h-21.568l5.824-5.824c0.896-0.896 0.896-2.432 0-3.328-0.48-0.48-1.088-0.704-1.696-0.704s-1.216 0.224-1.696 0.704l-9.824 9.824c-0.448 0.448-0.704 1.056-0.704 1.696s0.224 1.248 0.704 1.696z"></path>
    </symbol>
    <symbol id="icon-arrow-right" viewBox="0 0 32 32">
        <path d="M31.296 14.336l-9.888-9.888c-0.896-0.896-2.432-0.896-3.328 0s-0.896 2.432 0 3.328l5.824 5.856h-21.536c-1.312 0-2.368 1.056-2.368 2.368s1.056 2.368 2.368 2.368h21.568l-5.856 5.824c-0.896 0.896-0.896 2.432 0 3.328 0.48 0.48 1.088 0.704 1.696 0.704s1.216-0.224 1.696-0.704l9.824-9.824c0.448-0.448 0.704-1.056 0.704-1.696s-0.224-1.248-0.704-1.664z"></path>
    </symbol>
</svg>


<!-- üì¢ –ê–∫—Ü–∏—è -->
    <div class="discount-container">
        <h2>–°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–µ –∑–∞–∫–∞–∑—ã!</h2>
        <p>–û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é —Å–∫–∏–¥–∫—É!</p>
        <a href="/catalog" class="discount-button">–ö—É–ø–∏—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π</a>
    </div>



    <!-- üí° –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã -->
    <div class="container">
        <h2 class="title">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</h2>
        <div class="products-grid">
            @foreach($popularProducts as $product)
                <div class="product-card">
                    <img src="{{ asset('storage/' . $product->image) }}" alt="{{ $product->name }}">
                    <div class="product-info">
                        <h5 class="product-name">{{ $product->name }}</h5>
                        <p class="product-description">{{ Str::limit($product->description, 80) }}</p>
                        <p class="product-price">
                            @if($product->discount_price)
                                <span class="old-price">‚ÇΩ{{ $product->price }}</span>
                                <span class="discounted-price">‚ÇΩ{{ number_format($product->discount_price, 2) }}</span>
                            @else
                                ‚ÇΩ{{ number_format($product->price, 2) }}
                            @endif
                        </p>

                        <a href="{{ route('product.show', $product->id) }}" class="product-button">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                    </div>
                </div>
            @endforeach
        </div>
    </div>



    <!-- üõ†Ô∏è –°–±–æ—Ä–∫–∏ –ø–æ–¥ –∑–∞–∫–∞–∑ -->
    <section class="steps">
        <h2>–ü–æ–ª—É—á–∏—Ç–µ –º–æ—â–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –ü–ö –∑–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞</h2>
        <div class="steps-container">
            <div class="step">
                <div class="step-icon">
                    <img src="{{ asset('imagess/11.svg') }}" alt="–ó–∞—è–≤–∫–∞">
                </div>
                <h3>–û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ —Å–∞–π—Ç–µ</h3>
                <p>–î–∞–ª–µ–µ –º—ã —É—Ç–æ—á–Ω–∏–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ü–æ—Å–ª–µ –∑–∞–∫–ª—é—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä —Å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π –≤ 50% –æ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.</p>
            </div>
            <div class="step">
                <div class="step-icon">
                    <img src="{{ asset('imagess/22.svg') }}" alt="–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ">
                </div>
                <h3>–ó–∞–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ</h3>
                <p>–û–±—ã—á–Ω–æ –º—ã —Å—Ä–∞–∑—É —Å–æ–±–∏—Ä–∞–µ–º –ü–ö, –Ω–æ –∏–Ω–æ–≥–¥–∞ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ—Ç–∞–ª–∏. –ï—Å–ª–∏ –í–∞—à–∞ —Å–±–æ—Ä–∫–∞ —É–∂–µ –≤ –Ω–∞–ª–∏—á–∏–∏, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Ä–∞–∑—É.</p>
            </div>
            <div class="step">
                <div class="step-icon">
                    <img src="{{ asset('imagess/33.svg') }}" alt="–°–±–æ—Ä–∫–∞">
                </div>
                <h3>–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–±–æ—Ä–∫–µ</h3>
                <p>–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ü–ö. –û—Ç–ø—Ä–∞–≤–∏–º –≤–∏–¥–µ–æ —Å —Ç–µ—Å—Ç–∞–º–∏ –∏ –≤–Ω–µ—à–Ω–∏–º –≤–∏–¥–æ–º. –î–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ.</p>
            </div>
            <div class="step">
                <div class="step-icon">
                    <img src="{{ asset('imagess/44.svg') }}" alt="–î–æ—Å—Ç–∞–≤–∫–∞">
                </div>
                <h3>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä</h3>
                <p>–¢—â–∞—Ç–µ–ª—å–Ω–æ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –°–î–≠–ö (–¥–µ–ª–∞–µ–º —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –∏ –æ–±—Ä–µ—à–µ—Ç–∫—É). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä.</p>
            </div>
        </div>
    </section>



<!-- –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞ -->
<button id="chatbot-open" class="chatbot-open-btn">üí¨</button>

<!-- –ß–∞—Ç-–±–æ—Ç -->
<div class="chatbot-container">
    <div class="chatbot-header">
        <h3>–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤—ã–±–æ—Ä—É –ü–ö</h3>
        <button id="chatbot-close">√ó</button>
    </div>
    <div class="chatbot-body" id="chatbot-body">
        <div class="chatbot-messages" id="chatbot-messages">
            <div class="chatbot-message bot-message">–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–≤–æ–π –ü–ö. –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–±–æ—Ä–∫—É –ø–æ –±—é–¥–∂–µ—Ç—É –∏–ª–∏ –∏–≥—Ä–∞–º ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏!</div>
        </div>
        <div class="chatbot-input">
            <div class="input-wrapper">
                <input type="text" id="chatbot-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...">
                <div id="suggestions-list" class="suggestions-list"></div>
            </div>
            <button id="chatbot-send">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
    </div>
</div>



<script>
document.addEventListener('DOMContentLoaded', function() {
    const chatbotContainer = document.querySelector('.chatbot-container');
    const chatbotMessages = document.getElementById('chatbot-messages');
    const chatbotInput = document.getElementById('chatbot-input');
    const chatbotSend = document.getElementById('chatbot-send');
    const chatbotClose = document.getElementById('chatbot-close');
    const chatbotOpen = document.getElementById('chatbot-open');
    const suggestionsList = document.getElementById('suggestions-list');

    const responses = {
        '–∫–∞–∫–æ–π –ø–∫ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∏–≥—Ä': '–î–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º Intel Core i7 –∏–ª–∏ AMD Ryzen 7, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–æ–π NVIDIA RTX 3060 –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é –æ–±—ä—ë–º–æ–º 16 –ì–ë.',
        '–∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–∫': '–î–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –±—é–¥–∂–µ—Ç –æ—Ç 80 000 —Ä—É–±–ª–µ–π. –î–ª—è —Å–∏—Å—Ç–µ–º –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ ‚Äî –æ—Ç 120 000 —Ä—É–±–ª–µ–π.',
        '–∫–∞–∫–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ —Å–±–æ—Ä–∫—É': '–ù–∞ –≤—Å–µ –Ω–∞—à–∏ —Å–±–æ—Ä–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≥–∞—Ä–∞–Ω—Ç–∏—è —Å—Ä–æ–∫–æ–º –¥–æ 3 –ª–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –∏ —É—Å–ª–æ–≤–∏–π –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.',
        '–∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑': '–ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.',
        '–∫–∞–∫–∏–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –ª—É—á—à–µ': '–î–ª—è –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã Intel Core i7/i9 –∏–ª–∏ AMD Ryzen 7/9, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã NVIDIA RTX 3060/3070/3080 –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å –æ—Ç 16 –¥–æ 32 –ì–ë.',
        '–µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–µ —Å–±–æ—Ä–∫–∏': '–î–∞, –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≥–æ—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –±—é–¥–∂–µ—Ç–æ–≤.',
        '–∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤—ã–±—Ä–∞—Ç—å': '–î–ª—è –∏–≥—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º Intel Core i7 –∏–ª–∏ AMD Ryzen 7. –î–ª—è –±–æ–ª–µ–µ —Ç—Ä–µ–±–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–¥–æ–π–¥—É—Ç Intel Core i9 –∏–ª–∏ AMD Ryzen 9.',
        '–∫–∞–∫–∞—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –ª—É—á—à–µ –¥–ª—è –∏–≥—Ä': '–î–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã NVIDIA RTX 3060, 3070 –∏–ª–∏ 3080 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.',
        '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞': '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 50 000 —Ä—É–±–ª–µ–π. –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.',
        '–º–æ–∂–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å': '–î–∞, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º Windows –∏–ª–∏ Linux –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É.',
        '–∫–∞–∫ —Å–æ–±—Ä–∞—Ç—å –ø–∫ —Å–∞–º–æ–º—É': '–î–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π —Å–±–æ—Ä–∫–∏ –ø–æ—Ç—Ä–µ–±—É—é—Ç—Å—è –∫–æ—Ä–ø—É—Å, –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞, –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å, –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏ (SSD/HDD) –∏ –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è. –ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.',
        '—á—Ç–æ –ª—É—á—à–µ: amd –∏–ª–∏ intel': 'AMD –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–æ–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, Intel –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö. –î–ª—è –∏–≥—Ä –æ–±–∞ –±—Ä–µ–Ω–¥–∞ –ø–æ–¥—Ö–æ–¥—è—Ç –æ—Ç–ª–∏—á–Ω–æ.',
        '–∫–∞–∫—É—é –º–∞—Ç–µ—Ä–∏–Ω—Å–∫—É—é –ø–ª–∞—Ç—É –≤—ã–±—Ä–∞—Ç—å': '–î–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ Intel –ø–æ–¥–æ–π–¥—É—Ç –ø–ª–∞—Ç—ã —Å —á–∏–ø—Å–µ—Ç–∞–º–∏ Z690 –∏–ª–∏ Z790, –¥–ª—è AMD ‚Äî B550 –∏–ª–∏ X570. –í—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º.',
        '—Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏': '–î–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 16 –ì–ë –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏. –î–ª—è —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –∏–ª–∏ —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 32 –ì–ë.',
        '–∫–∞–∫–æ–π –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –Ω—É–∂–µ–Ω': '–î–ª—è —Å—Ä–µ–¥–Ω–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–æ–π–¥—ë—Ç –±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç—å—é 650 –í—Ç, –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º ‚Äî 850 –í—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –º–æ–¥–µ–ª–∏ —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º 80+ Gold.',
        '–∫–∞–∫–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞—Ç—å': '–î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–¥–æ–π–¥—ë—Ç –≤–æ–∑–¥—É—à–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Noctua NH-D15), –¥–ª—è –º–æ—â–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∂–∏–¥–∫–æ—Å—Ç–Ω–æ–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, NZXT Kraken X63).',
        '–∫–∞–∫—É—é –ø–µ—Ä–∏—Ñ–µ—Ä–∏—é –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, Logitech G Pro), –º—ã—à—å Logitech G502 –∏ –º–æ–Ω–∏—Ç–æ—Ä —Å —á–∞—Å—Ç–æ—Ç–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è 144 –ì—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, ASUS TUF Gaming).',
        '–∫–∞–∫–æ–π —Å–æ—Ñ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –∏–≥—Ä': '–î–ª—è –∏–≥—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Steam, Discord, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä—ã –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç NVIDIA/AMD, –∞ —Ç–∞–∫–∂–µ —É—Ç–∏–ª–∏—Ç–∞ MSI Afterburner –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.',
        '—Å–æ–±–µ—Ä–∏ –ø–∫ –∑–∞ –º–æ–π –±—é–¥–∂–µ—Ç': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö, –∏ –º—ã –ø—Ä–µ–¥–ª–æ–∂–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.',
        '–≤–æ —á—Ç–æ —Ö–æ—á—É –ø–æ–∏–≥—Ä–∞—Ç—å': '–£–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–∏–µ –∏–≥—Ä—ã –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–≥—Ä–∞—Ç—å, –∏ –º—ã –ø–æ–¥–±–µ—Ä—ë–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.',
        '–∫–∞–∫–æ–π ssd –≤—ã–±—Ä–∞—Ç—å': '–î–ª—è –∏–≥—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º SSD —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º NVMe, –æ–±—ä—ë–º–æ–º –æ—Ç 512 –ì–ë (–Ω–∞–ø—Ä–∏–º–µ—Ä, Samsung 970 EVO –∏–ª–∏ WD Black SN750).',
        '–Ω—É–∂–µ–Ω –ª–∏ hdd': 'HDD –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-2 –¢–ë), –µ—Å–ª–∏ SSD –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å.',
        '–∫–∞–∫–æ–π –∫–æ—Ä–ø—É—Å –ª—É—á—à–µ': '–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ—Ä–ø—É—Å —Å —Ö–æ—Ä–æ—à–µ–π –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–µ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, NZXT H510 –∏–ª–∏ Cooler Master MasterBox.',
        '–∫–∞–∫ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∫': '–î–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã (–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞, –û–ó–£) –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –∏—Ö –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏. –ú—ã –º–æ–∂–µ–º –ø–æ–º–æ—á—å —Å –ø–æ–¥–±–æ—Ä–æ–º.',
        '–∫–∞–∫–æ–π –º–æ–Ω–∏—Ç–æ—Ä –≤—ã–±—Ä–∞—Ç—å': '–î–ª—è –∏–≥—Ä –æ–ø—Ç–∏–º–∞–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º Full HD –∏–ª–∏ 2K, —á–∞—Å—Ç–æ—Ç–æ–π 144 –ì—Ü –∏ –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–∫–ª–∏–∫–∞ 1 –º—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ASUS TUF VG27AQ).',
        '—á—Ç–æ —Ç–∞–∫–æ–µ —Ñ–ø—Å': 'FPS (Frames Per Second) ‚Äî —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –ø–ª–∞–≤–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–≥—Ä–∞—Ö. –ß–µ–º –≤—ã—à–µ FPS, —Ç–µ–º –ª—É—á—à–µ –∏–≥—Ä–æ–≤–æ–π –æ–ø—ã—Ç.',
        '–∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∫': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—Ä–æ–¥–µ 3DMark –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∏–ª–∏ Cinebench –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, —á—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.',
        '–∫–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –∏–≥—Ä': '–î–ª—è –æ–Ω–ª–∞–π–Ω-–∏–≥—Ä –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ 20-50 –ú–±–∏—Ç/—Å —Å –Ω–∏–∑–∫–∏–º –ø–∏–Ω–≥–æ–º (–¥–æ 50 –º—Å).'
    };

    const suggestionOptions = Object.keys(responses).map(key => {
        return key.charAt(0).toUpperCase() + key.slice(1) + '?';
    });

    const gameOptions = {
        '–≤–∞–ª': 'Valorant',
        '–∫—Å': 'CS:GO',
        '–¥–æ—Ç–∞': 'Dota 2',
        '—Å–∞–π–±–µ—Ä': 'Cyberpunk 2077',
        '—Ädr': 'Red Dead Redemption 2',
        '–≥—Ç–∞': 'GTA V',
        '—Ñ–æ—Ä—Ç': 'Fortnite',
        '–º–∞–π–Ω': 'Minecraft',
        '–∫–æ–¥': 'Call of Duty',
        '–∞–ø–µ–∫—Å': 'Apex Legends'
    };

    let isFirstOpen = true;
    let awaitingBudget = false;
    let awaitingGames = false;

    // –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç
    chatbotOpen.addEventListener('click', () => {
        chatbotContainer.style.display = 'flex';
        if (isFirstOpen) {
            showInitialSuggestions();
            isFirstOpen = false;
        }
    });

    // –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç
    chatbotClose.addEventListener('click', () => {
        chatbotContainer.style.display = 'none';
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    chatbotSend.addEventListener('click', sendMessage);
    chatbotInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });

    // –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    chatbotInput.addEventListener('input', () => {
        const query = chatbotInput.value.trim().toLowerCase();
        suggestionsList.innerHTML = '';
        if (query) {
            let options = awaitingGames ? Object.entries(gameOptions) : suggestionOptions.map(opt => [opt, opt]);
            const filteredSuggestions = options.filter(([shortcut, option]) =>
                shortcut.toLowerCase().includes(query) || option.toLowerCase().includes(query)
            );
            if (filteredSuggestions.length) {
                filteredSuggestions.forEach(([_, suggestion]) => {
                    const suggestionItem = document.createElement('div');
                    suggestionItem.classList.add('suggestion-item');
                    suggestionItem.textContent = suggestion;
                    suggestionItem.addEventListener('click', () => {
                        chatbotInput.value = suggestion;
                        suggestionsList.style.display = 'none';
                        sendMessage();
                    });
                    suggestionsList.appendChild(suggestionItem);
                });
                suggestionsList.style.display = 'block';
            } else {
                suggestionsList.style.display = 'none';
            }
        } else {
            suggestionsList.style.display = 'none';
        }
    });

    // –°–∫—Ä—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–ª—è
    document.addEventListener('click', (e) => {
        if (!chatbotInput.contains(e.target) && !suggestionsList.contains(e.target)) {
            suggestionsList.style.display = 'none';
        }
    });

    function sendMessage() {
        const userMessage = chatbotInput.value.trim();
        if (!userMessage) return;

        addMessage(userMessage, 'user-message');
        chatbotInput.value = '';
        suggestionsList.style.display = 'none';

        if (awaitingBudget) {
            handleBudgetResponse(userMessage);
            awaitingBudget = false;
        } else if (awaitingGames) {
            handleGamesResponse(userMessage);
            awaitingGames = false;
        } else {
            setTimeout(() => {
                addMessage(getBotResponse(userMessage), 'bot-message');
            }, 500);
        }
    }

    function addMessage(text, className) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('chatbot-message', className);
        messageDiv.textContent = text;
        chatbotMessages.appendChild(messageDiv);
        chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    function showInitialSuggestions() {
        const existingSuggestions = chatbotMessages.querySelectorAll('.chatbot-suggestion');
        existingSuggestions.forEach(suggestion => suggestion.remove());

        const initialSuggestions = [
            '–ö–∞–∫–æ–π –ü–ö –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –∏–≥—Ä?', '–°–æ–±–µ—Ä–∏ –ü–ö –∑–∞ –º–æ–π –±—é–¥–∂–µ—Ç', '–í–æ —á—Ç–æ —Ö–æ—á—É –ø–æ–∏–≥—Ä–∞—Ç—å', '–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?'
        ];
        initialSuggestions.forEach(suggestion => {
            const suggestionDiv = document.createElement('div');
            suggestionDiv.classList.add('chatbot-message', 'chatbot-suggestion');
            suggestionDiv.textContent = suggestion;
            suggestionDiv.addEventListener('click', () => {
                chatbotInput.value = suggestion;
                sendMessage();
            });
            chatbotMessages.appendChild(suggestionDiv);
        });
        chatbotMessages.scrollTop = chatbotMessages.scrollHeight;
    }

    function getBotResponse(userMessage) {
        const lowerMessage = userMessage.toLowerCase();
        for (const [key, value] of Object.entries(responses)) {
            if (lowerMessage.includes(key)) {
                if (key === '—Å–æ–±–µ—Ä–∏ –ø–∫ –∑–∞ –º–æ–π –±—é–¥–∂–µ—Ç') {
                    awaitingBudget = true;
                } else if (key === '–≤–æ —á—Ç–æ —Ö–æ—á—É –ø–æ–∏–≥—Ä–∞—Ç—å') {
                    awaitingGames = true;
                }
                return value;
            }
        }
        return '–ù–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å!';
    }

    function handleBudgetResponse(budget) {
        const budgetNum = parseInt(budget.replace(/[^0-9]/g, ''));
        let response;
        if (isNaN(budgetNum)) {
            response = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –±—é–¥–∂–µ—Ç –≤ —Ä—É–±–ª—è—Ö —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 80000).';
        } else if (budgetNum < 50000) {
            response = '–ó–∞ ' + budgetNum + ' —Ä—É–±–ª–µ–π –º–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å –±–∞–∑–æ–≤—ã–π –ü–ö: Intel Core i3, GTX 1650, 8 –ì–ë –û–ó–£, SSD 256 –ì–ë.';
        } else if (budgetNum < 80000) {
            response = '–ó–∞ ' + budgetNum + ' —Ä—É–±–ª–µ–π: Intel Core i5, RTX 3050, 16 –ì–ë –û–ó–£, SSD 512 –ì–ë ‚Äî –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.';
        } else if (budgetNum < 120000) {
            response = '–ó–∞ ' + budgetNum + ' —Ä—É–±–ª–µ–π: Intel Core i7, RTX 3060, 16 –ì–ë –û–ó–£, SSD 1 –¢–ë ‚Äî –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –≥–µ–π–º–∏–Ω–≥.';
        } else {
            response = '–ó–∞ ' + budgetNum + ' —Ä—É–±–ª–µ–π: AMD Ryzen 9, RTX 4080, 32 –ì–ë –û–ó–£, SSD 1 –¢–ë ‚Äî —Ç–æ–ø–æ–≤–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è 4K!';
        }
        addMessage(response, 'bot-message');
    }

    function handleGamesResponse(games) {
        const lowerGames = games.toLowerCase();
        let fullGameName = '';
        let response;

        for (const [shortcut, game] of Object.entries(gameOptions)) {
            if (lowerGames.includes(shortcut)) {
                fullGameName = game;
                break;
            }
        }

        if (!fullGameName) {
            for (const game of Object.values(gameOptions)) {
                if (lowerGames.includes(game.toLowerCase())) {
                    fullGameName = game;
                    break;
                }
            }
        }

        if (fullGameName === 'CS:GO' || fullGameName === 'Dota 2' || fullGameName === 'Valorant') {
            response = `–î–ª—è ${fullGameName}: Intel Core i5, GTX 1660 Super, 16 –ì–ë –û–ó–£, SSD 512 –ì–ë. –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~60 000 —Ä—É–±–ª–µ–π.`;
        } else if (fullGameName === 'Cyberpunk 2077' || fullGameName === 'Red Dead Redemption 2' || fullGameName === 'GTA V') {
            response = `–î–ª—è ${fullGameName}: Intel Core i7, RTX 3070, 16 –ì–ë –û–ó–£, SSD 1 –¢–ë. –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~110 000 —Ä—É–±–ª–µ–π.`;
        } else if (fullGameName === 'Fortnite' || fullGameName === 'Minecraft') {
            response = `–î–ª—è ${fullGameName}: Intel Core i5, RTX 3050, 16 –ì–ë –û–ó–£, SSD 512 –ì–ë. –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~70 000 —Ä—É–±–ª–µ–π.`;
        } else if (fullGameName === 'Call of Duty' || fullGameName === 'Apex Legends') {
            response = `–î–ª—è ${fullGameName}: Intel Core i5, RTX 3060, 16 –ì–ë –û–ó–£, SSD 512 –ì–ë. –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~80 000 —Ä—É–±–ª–µ–π.`;
        } else {
            response = '–ù–∞–∑–æ–≤–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–≥—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∫—Å" –¥–ª—è CS:GO, "–≤–∞–ª" –¥–ª—è Valorant), —á—Ç–æ–±—ã —è –ø–æ–¥–æ–±—Ä–∞–ª —Å–±–æ—Ä–∫—É –∏ —É–∫–∞–∑–∞–ª —Å—Ç–æ–∏–º–æ—Å—Ç—å!';
        }

        addMessage(response, 'bot-message');
    }
});
</script>




















    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.3.5/js/swiper.min.js'></script>

    <script>
(() => {
    const modelViewers = document.querySelectorAll('model-viewer');
    const cards = document.querySelectorAll('.card');
    const defaultOrbit = '64deg 25deg 64m';
    const hoverOrbit = '90deg -42deg 80m';
    const applyOrbit = (modelViewer, orbit) => {
      modelViewer.setAttribute('camera-orbit', orbit);
      modelViewer.setAttribute('interpolation-decay', '200');
    };
    cards.forEach((card, index) => {
      const modelViewer = modelViewers[index];
      if (modelViewer) {
        card.addEventListener('mouseenter', () => applyOrbit(modelViewer, hoverOrbit));
        card.addEventListener('mouseleave', () => applyOrbit(modelViewer, defaultOrbit));
        modelViewer.addEventListener('load', () => {
          modelViewer.classList.add('loaded');
        });
      } else {
        console.log(`No model found for card at i:${index}`);
      }
    });
  })();
  
  function changeModelStyle(element, deg, invert = 0) {
    const card = element.closest('.card');
    const modelViewer = card.querySelector('model-viewer');
    if (modelViewer) { modelViewer.style.filter = `hue-rotate(${deg}deg) invert(${invert})`; }
  }


  
        (() => {
    const modelViewers = document.querySelectorAll('model-viewer');
    const cards = document.querySelectorAll('.card');
    const defaultOrbit = '64deg 25deg 64m';
    const hoverOrbit = '90deg -42deg 80m';
    const applyOrbit = (modelViewer, orbit) => {
      modelViewer.setAttribute('camera-orbit', orbit);
      modelViewer.setAttribute('interpolation-decay', '200');
    };
    cards.forEach((card, index) => {
      const modelViewer = modelViewers[index];
      if (modelViewer) {
        card.addEventListener('mouseenter', () => applyOrbit(modelViewer, hoverOrbit));
        card.addEventListener('mouseleave', () => applyOrbit(modelViewer, defaultOrbit));
        modelViewer.addEventListener('load', () => {
          modelViewer.classList.add('loaded');
        });
      } else {
        console.log(`No model found for card at i:${index}`);
      }
    });
  })();
  
  function changeModelStyle(element, deg, invert = 0) {
    const card = element.closest('.card');
    const modelViewer = card.querySelector('model-viewer');
    if (modelViewer) { modelViewer.style.filter = `hue-rotate(${deg}deg) invert(${invert})`; }
  }

  var swiper = new Swiper('.product-slider', {
    spaceBetween: 30,
    effect: 'fade',
    // initialSlide: 2,
    loop: false,
    navigation: {
        nextEl: '.next',
        prevEl: '.prev'
    },
    // mousewheel: {
    //     // invert: false
    // },
    on: {
        init: function(){
            var index = this.activeIndex;

            var target = $('.product-slider__item').eq(index).data('target');

            console.log(target);

            $('.product-img__item').removeClass('active');
            $('.product-img__item#'+ target).addClass('active');
        }
    }

});

swiper.on('slideChange', function () {
    var index = this.activeIndex;

    var target = $('.product-slider__item').eq(index).data('target');

    console.log(target);

    $('.product-img__item').removeClass('active');
    $('.product-img__item#'+ target).addClass('active');

    if(swiper.isEnd) {
        $('.prev').removeClass('disabled');
        $('.next').addClass('disabled');
    } else {
        $('.next').removeClass('disabled');
    }

    if(swiper.isBeginning) {
        $('.prev').addClass('disabled');
    } else {
        $('.prev').removeClass('disabled');
    }
});

$(".js-fav").on("click", function() {
    $(this).find('.heart').toggleClass("is-active");
});
    </script>

@endsection
